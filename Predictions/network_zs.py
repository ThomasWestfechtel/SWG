import numpy as np
import clip
import torch
import torch.nn as nn

def get_names(dset):
    if(dset=='office-home'):
        classes = [
            'alarm clock',
            'backpack',
            'batteries',
            'bed',
            'bike',
            'bottle',
            'bucket',
            'calculator',
            'calendar',
            'candles',
            'chair',
            'clipboards',
            'computer',
            'couch',
            'curtains',
            'desk lamp',
            'drill',
            'eraser',
            'exit sign',
            'fan',
            'file cabinet',
            'flipflops',
            'flowers',
            'folder',
            'fork',
            'glasses',
            'hammer',
            'helmet',
            'kettle',
            'keyboard',
            'knives',
            'lamp shade',
            'laptop',
            'marker',
            'monitor',
            'mop',
            'mouse',
            'mug',
            'notebook',
            'oven',
            'pan',
            'paper clip',
            'pen',
            'pencil',
            'postit notes',
            'printer',
            'push pin',
            'radio',
            'refrigerator',
            'ruler',
            'scissors',
            'screwdriver',
            'shelf',
            'sink',
            'sneakers',
            'soda',
            'speaker',
            'spoon',
            'table',
            'telephone',
            'toothbrush',
            'toys',
            'trash can',
            'tv',
            'webcam',
        ]
    elif(dset=='office'):
        classes = [
            'back pack',
            'bike',
            'bike helmet',
            'bookcase',
            'bottle',
            'calculator',
            'desk chair',
            'desk lamp',
            'desktop computer',
            'file cabinet',
            'headphones',
            'keyboard',
            'laptop computer',
            'desk tray',
            'mobile phone',
            'monitor',
            'mouse',
            'mug',
            'paper notebook',
            'pen',
            'cord phone',
            'printer',
            'projector',
            'hole puncher',
            'ring binder',
            'ruler',
            'scissors',
            'music speaker',
            'stapler',
            'tape dispenser',
            'trash can',
        ]
    elif(dset=='visda'):
        classes = [
            'aeroplane',
            'bicycle',
            'bus',
            'car',
            'horse',
            'knife',
            'motorcycle',
            'person',
            'plant',
            'skateboard',
            'train',
            'truck',
        ]
    elif(dset=='domain-net'):
        classes = [
            'aircraft carrier',
            'airplane',
            'alarm clock',
            'ambulance',
            'angel',
            'animal migration',
            'ant',
            'anvil',
            'apple',
            'arm',
            'asparagus',
            'axe',
            'backpack',
            'banana',
            'bandage',
            'barn',
            'baseball',
            'baseball bat',
            'basket',
            'basketball',
            'bat',
            'bathtub',
            'beach',
            'bear',
            'beard',
            'bed',
            'bee',
            'belt',
            'bench',
            'bicycle',
            'binoculars',
            'bird',
            'birthday cake',
            'blackberry',
            'blueberry',
            'book',
            'boomerang',
            'bottlecap',
            'bowtie',
            'bracelet',
            'brain',
            'bread',
            'bridge',
            'broccoli',
            'broom',
            'bucket',
            'bulldozer',
            'bus',
            'bush',
            'butterfly',
            'cactus',
            'cake',
            'calculator',
            'calendar',
            'camel',
            'camera',
            'camouflage',
            'campfire',
            'candle',
            'cannon',
            'canoe',
            'car',
            'carrot',
            'castle',
            'cat',
            'ceiling fan',
            'cello',
            'cell phone',
            'chair',
            'chandelier',
            'church',
            'circle',
            'clarinet',
            'clock',
            'cloud',
            'coffee cup',
            'compass',
            'computer',
            'cookie',
            'cooler',
            'couch',
            'cow',
            'crab',
            'crayon',
            'crocodile',
            'crown',
            'cruise ship',
            'cup',
            'diamond',
            'dishwasher',
            'diving board',
            'dog',
            'dolphin',
            'donut',
            'door',
            'dragon',
            'dresser',
            'drill',
            'drums',
            'duck',
            'dumbbell',
            'ear',
            'elbow',
            'elephant',
            'envelope',
            'eraser',
            'eye',
            'eyeglasses',
            'face',
            'fan',
            'feather',
            'fence',
            'finger',
            'fire hydrant',
            'fireplace',
            'firetruck',
            'fish',
            'flamingo',
            'flashlight',
            'flip flops',
            'floor lamp',
            'flower',
            'flying saucer',
            'foot',
            'fork',
            'frog',
            'frying pan',
            'garden',
            'garden hose',
            'giraffe',
            'goatee',
            'golf club',
            'grapes',
            'grass',
            'guitar',
            'hamburger',
            'hammer',
            'hand',
            'harp',
            'hat',
            'headphones',
            'hedgehog',
            'helicopter',
            'helmet',
            'hexagon',
            'hockey puck',
            'hockey stick',
            'horse',
            'hospital',
            'hot air balloon',
            'hot dog',
            'hot tub',
            'hourglass',
            'house',
            'house plant',
            'hurricane',
            'ice cream',
            'jacket',
            'jail',
            'kangaroo',
            'key',
            'keyboard',
            'knee',
            'knife',
            'ladder',
            'lantern',
            'laptop',
            'leaf',
            'leg',
            'light bulb',
            'lighter',
            'lighthouse',
            'lightning',
            'line',
            'lion',
            'lipstick',
            'lobster',
            'lollipop',
            'mailbox',
            'map',
            'marker',
            'matches',
            'megaphone',
            'mermaid',
            'microphone',
            'microwave',
            'monkey',
            'moon',
            'mosquito',
            'motorbike',
            'mountain',
            'mouse',
            'moustache',
            'mouth',
            'mug',
            'mushroom',
            'nail',
            'necklace',
            'nose',
            'ocean',
            'octagon',
            'octopus',
            'onion',
            'oven',
            'owl',
            'paintbrush',
            'paint can',
            'palm tree',
            'panda',
            'pants',
            'paper clip',
            'parachute',
            'parrot',
            'passport',
            'peanut',
            'pear',
            'peas',
            'pencil',
            'penguin',
            'piano',
            'pickup truck',
            'picture frame',
            'pig',
            'pillow',
            'pineapple',
            'pizza',
            'pliers',
            'police car',
            'pond',
            'pool',
            'popsicle',
            'postcard',
            'potato',
            'power outlet',
            'purse',
            'rabbit',
            'raccoon',
            'radio',
            'rain',
            'rainbow',
            'rake',
            'remote control',
            'rhinoceros',
            'rifle',
            'river',
            'roller coaster',
            'rollerskates',
            'sailboat',
            'sandwich',
            'saw',
            'saxophone',
            'school bus',
            'scissors',
            'scorpion',
            'screwdriver',
            'sea turtle',
            'see saw',
            'shark',
            'sheep',
            'shoe',
            'shorts',
            'shovel',
            'sink',
            'skateboard',
            'skull',
            'skyscraper',
            'sleeping bag',
            'smiley face',
            'snail',
            'snake',
            'snorkel',
            'snowflake',
            'snowman',
            'soccer ball',
            'sock',
            'speedboat',
            'spider',
            'spoon',
            'spreadsheet',
            'square',
            'squiggle',
            'squirrel',
            'stairs',
            'star',
            'steak',
            'stereo',
            'stethoscope',
            'stitches',
            'stop sign',
            'stove',
            'strawberry',
            'streetlight',
            'string bean',
            'submarine',
            'suitcase',
            'sun',
            'swan',
            'sweater',
            'swing set',
            'sword',
            'syringe',
            'table',
            'teapot',
            'teddy-bear',
            'telephone',
            'television',
            'tennis racquet',
            'tent',
            'The Eiffel Tower',
            'The Great Wall of China',
            'The Mona Lisa',
            'tiger',
            'toaster',
            'toe',
            'toilet',
            'tooth',
            'toothbrush',
            'toothpaste',
            'tornado',
            'tractor',
            'traffic light',
            'train',
            'tree',
            'triangle',
            'trombone',
            'truck',
            'trumpet',
            't-shirt',
            'umbrella',
            'underwear',
            'van',
            'vase',
            'violin',
            'washing machine',
            'watermelon',
            'waterslide',
            'whale',
            'wheel',
            'windmill',
            'wine bottle',
            'wine glass',
            'wristwatch',
            'yoga',
            'zebra',
            'zigzag',
        ]
    return classes

def get_templates(id):
    ### 0 = Normal; 1 = CIFAR; 2 = ImageNet; 3 = ImageNetSmall ###
    if(id == 0):
        templates = [
            'a {}',
        ]
    elif(id == 1):
        # #### CIFAR ####
        templates = [
            'a photo of a {}.',
            'a blurry photo of a {}.',
            'a black and white photo of a {}.',
            'a low contrast photo of a {}.',
            'a high contrast photo of a {}.',
            'a bad photo of a {}.',
            'a good photo of a {}.',
            'a photo of a small {}.',
            'a photo of a big {}.',
            'a photo of the {}.',
            'a blurry photo of the {}.',
            'a black and white photo of the {}.',
            'a low contrast photo of the {}.',
            'a high contrast photo of the {}.',
            'a bad photo of the {}.',
            'a good photo of the {}.',
            'a photo of the small {}.',
            'a photo of the big {}.',
        ]
    elif(id == 2):
        #### ImageNet ####
        templates = [
            'a bad photo of a {}.',
            'a photo of many {}.',
            'a sculpture of a {}.',
            'a photo of the hard to see {}.',
            'a low resolution photo of the {}.',
            'a rendering of a {}.',
            'graffiti of a {}.',
            'a bad photo of the {}.',
            'a cropped photo of the {}.',
            'a tattoo of a {}.',
            'the embroidered {}.',
            'a photo of a hard to see {}.',
            'a bright photo of a {}.',
            'a photo of a clean {}.',
            'a photo of a dirty {}.',
            'a dark photo of the {}.',
            'a drawing of a {}.',
            'a photo of my {}.',
            'the plastic {}.',
            'a photo of the cool {}.',
            'a close-up photo of a {}.',
            'a black and white photo of the {}.',
            'a painting of the {}.',
            'a painting of a {}.',
            'a pixelated photo of the {}.',
            'a sculpture of the {}.',
            'a bright photo of the {}.',
            'a cropped photo of a {}.',
            'a plastic {}.',
            'a photo of the dirty {}.',
            'a jpeg corrupted photo of a {}.',
            'a blurry photo of the {}.',
            'a photo of the {}.',
            'a good photo of the {}.',
            'a rendering of the {}.',
            'a {} in a video game.',
            'a photo of one {}.',
            'a doodle of a {}.',
            'a close-up photo of the {}.',
            'a photo of a {}.',
            'the origami {}.',
            'the {} in a video game.',
            'a sketch of a {}.',
            'a doodle of the {}.',
            'a origami {}.',
            'a low resolution photo of a {}.',
            'the toy {}.',
            'a rendition of the {}.',
            'a photo of the clean {}.',
            'a photo of a large {}.',
            'a rendition of a {}.',
            'a photo of a nice {}.',
            'a photo of a weird {}.',
            'a blurry photo of a {}.',
            'a cartoon {}.',
            'art of a {}.',
            'a sketch of the {}.',
            'a embroidered {}.',
            'a pixelated photo of a {}.',
            'itap of the {}.',
            'a jpeg corrupted photo of the {}.',
            'a good photo of a {}.',
            'a plushie {}.',
            'a photo of the nice {}.',
            'a photo of the small {}.',
            'a photo of the weird {}.',
            'the cartoon {}.',
            'art of the {}.',
            'a drawing of the {}.',
            'a photo of the large {}.',
            'a black and white photo of a {}.',
            'the plushie {}.',
            'a dark photo of a {}.',
            'itap of a {}.',
            'graffiti of the {}.',
            'a toy {}.',
            'itap of my {}.',
            'a photo of a cool {}.',
            'a photo of a small {}.',
            'a tattoo of the {}.',
        ]
    elif(id == 3):
        #### ImageNetSmall ####
        templates = [
            'itap of a {}.',
            'a bad photo of the {}.',
            'a origami {}.',
            'a photo of the large {}.',
            'a {} in a video game.',
            'art of the {}.',
            'a photo of the small {}.',
        ]
    return templates

class ResNetFc(nn.Module):
  def __init__(self, class_num=1000, template_id=3, inter=1, dset='office-home'):
    super(ResNetFc, self).__init__()
    model_clip, _  = clip.load("ViT-B/16")

    classnames = get_names(dset)
    templates = get_templates(template_id)
    model_ViT = model_clip.visual.type(torch.float32)
    model, preprocess = clip.load("ViT-B/16")
    self.backbone = model_ViT
    self.inter=inter
    with torch.no_grad():
        zeroshot_weights = []
        for classname in classnames:
            texts = [template.format(classname) for template in templates] #format with class
            texts = clip.tokenize(texts).cuda() #tokenize
            class_embeddings = model.encode_text(texts) #embed with text encoder
            class_embeddings /= class_embeddings.norm(dim=-1, keepdim=True)
            class_embedding = class_embeddings.mean(dim=0)
            class_embedding /= class_embedding.norm()
            zeroshot_weights.append(class_embedding)
        zeroshot_weights = torch.stack(zeroshot_weights, dim=1).cuda()
    class_weights = zeroshot_weights
    class_weights = class_weights.permute(1, 0)
    # class_weights = torch.from_numpy(cw).cuda()
    class_weights = class_weights / class_weights.norm(dim=1, keepdim=True)
    self.cfy = nn.Linear(512, class_num)
    self.cfy.weight.data = class_weights.type(torch.float32)
    self.cfy.bias.data.fill_(0.00)


  def forward(self, x: torch.Tensor):
    x = self.backbone.conv1(x)  # shape = [*, width, grid, grid]
    interpos = torch.zeros((x.shape[2], x.shape[3], x.shape[1]))
    interpos = interpos.cuda()
    x = x.reshape(x.shape[0], x.shape[1], -1)  # shape = [*, width, grid ** 2]
    x = x.permute(0, 2, 1)  # shape = [*, grid ** 2, width]
    x = torch.cat([self.backbone.class_embedding.to(x.dtype) + torch.zeros(x.shape[0], 1, x.shape[-1], dtype=x.dtype, device=x.device), x], dim=1)  # shape = [*, grid ** 2 + 1, width]
    if(self.inter==1):
        temp = self.backbone.positional_embedding.to(x.dtype)
        c_emb = temp[0:1,:]
        temp = temp[1:,:]
        temp = temp.reshape((1,1,14,14,temp.shape[1]))
        interpos = nn.functional.interpolate(temp, size=[interpos.shape[0], interpos.shape[1], interpos.shape[2]], mode='trilinear')
        interpos = interpos.reshape(-1, interpos.shape[4])
        interpos = torch.cat([c_emb, interpos], dim=0)
        x = x + interpos.detach()
    else:
        x = x + self.backbone.positional_embedding.to(x.dtype)
    x = self.backbone.ln_pre(x)
    x = x.permute(1, 0, 2)  # NLD -> LND
    x = self.backbone.transformer(x)
    x = x.permute(1, 0, 2)  # LND -> NLD
    x = self.backbone.ln_post(x[:, 0, :])
    if self.backbone.proj is not None:
      x = x @ self.backbone.proj
    y = self.cfy(x)
    return x, y